import pandas as pd
import os

# 1. Безопасное формирование путей
input_dir = '23_06_2025/russdom'  # Используем / для кроссплатформенности
output_dir = '23_06_2025/russdom'
input_path = os.path.join(input_dir, 'russdom.xlsx')
output_path = os.path.join(output_dir, 'normalized_russdom.xlsx')

# 2. Проверка существования файла и директории
if not os.path.exists(input_path):
    raise FileNotFoundError(f"Файл не найден: {input_path}")

# 3. Загрузка с обработкой возможных ошибок
try:
    df = pd.read_excel(input_path)
except Exception as e:
    raise Exception(f"Ошибка при чтении файла: {str(e)}")

# Словарь для нормализации названий колонок
column_mapping = {
    # Основные мета-данные (оставляем как есть)
    'Название': 'Название',
    'url': 'URL',
    'meta_description': 'Мета-описание',
    'meta_title': 'Мета-заголовок',
    'Артикул': 'Артикул',
    'Категория': 'Категория',
    'Путь': 'Путь',
    'Картинка': 'Изображение',
    'Описание': 'Описание',
    'Доступность': 'Доступность',
    'Модель': 'Модель',
    'Тип': 'Тип',
    'Назначение': 'Назначение',
    'Применение': 'Применение',

    # Масса/вес (унифицируем в "Масса")
    'Масса': 'Масса, кг',
    'Мас\xadса': 'Масса, кг',
    'Вес': 'Масса, кг',
    'Вес одной стойки': 'Масса стойки, кг',
    'Вес балки': 'Масса балки, кг',
    'Вес (кг)с упором': 'Масса с упором, кг',
    'Вес с упором(кг)': 'Масса с упором, кг',
    'Масса одной стойки': 'Масса стойки, кг',
    'Масса(кг)': 'Масса, кг',
    'Масса (кг)': 'Масса, кг',
    'Масса кассеты кг.': 'Масса кассеты, кг',
    'Масса кг.': 'Масса, кг',
    'Масса силовогоблока кг.': 'Масса силового блока, кг',

    # Размеры и геометрия (унифицируем единицы измерения)
    'Диаметр': 'Диаметр, мм',
    'Диаметр захвата': 'Диаметр захвата, мм',
    'Диаметр охвата': 'Диаметр охвата, мм',
    'Диаметр отверстия': 'Диаметр отверстия, мм',
    'Диаметр снимаемой детали': 'Диаметр детали, мм',
    'Диаметр резьбы': 'Диаметр резьбы, мм',
    'Диаметр труб': 'Диаметр труб, мм',
    'Внешний диаметр': 'Внешний диаметр, мм',
    'D мм.': 'Диаметр, мм',
    'D(mm)': 'Диаметр, мм',

    # Грузоподъемность и усилие
    'Грузоподъемность': 'Грузоподъемность, кг',
    'Грузовая    нагрузка': 'Грузоподъемность, кг',
    'Грузоподъемность опора/подхват': 'Грузоподъемность опоры, кг',
    'Грузоподъемность комплекса': 'Грузоподъемность комплекса, кг',
    'Грузоподъемность   обслуживаемой техники': 'Грузоподъемность техники, кг',
    'Номин. грузоподъемность одной стойки': 'Грузоподъемность стойки, кг',
    'Ном. грузоподъемность одной стойки': 'Грузоподъемность стойки, кг',
    'Тонн': 'Грузоподъемность, т',

    # Усилие и моменты
    'Усилие': 'Усилие, Н·м',
    'Усилие(N.m)': 'Усилие, Н·м',
    'Усилие (N.m)': 'Усилие, Н·м',
    'Усилие Nm.': 'Усилие, Н·м',
    'Градация(N.m)': 'Градация усилия, Н·м',
    'Градация (N.m)': 'Градация усилия, Н·м',
    'Крутящий момент Nm.': 'Крутящий момент, Н·м',
    'Момент затяжки Nm.': 'Момент затяжки, Н·м',
    'Max/ Момент Nm.': 'Макс. момент, Н·м',

    # Давление
    'Давление номинальное': 'Давление, бар',
    'Номинальное рабочее давление': 'Давление, бар',
    'Максимальное рабочее давление': 'Макс. давление, бар',
    'Давление, 1-я ступень / 2-я ступень': 'Давление по ступеням, бар',
    'Высокое рабочее давление': 'Макс. давление, бар',
    'Низкое рабочее давление': 'Мин. давление, бар',

    # Габариты и размеры
    'Габариты': 'Габариты, мм',
    'Габариты коробки': 'Габариты коробки, мм',
    'Габариты (ДxШxВ)': 'Габариты (Д×Ш×В), мм',
    'Габариты рабочего прос\xadтранс\xadтва (B1xh1)': 'Габариты рабочей зоны (B1×h1), мм',
    'Габаритные размеры стойки в транспортном положении': 'Габариты стойки, мм',

    # Высота и ход
    'Высота инструмента': 'Высота инструмента, мм',
    'Высота подхвата': 'Высота подхвата, мм',
    'Высота подъема': 'Высота подъема, мм',
    'Диапазон высот подъема': 'Диапазон высот, мм',
    'Ход штока': 'Ход штока, мм',
    'Ход штока/травер\xadсы': 'Ход штока, мм',
    'Ход поршня': 'Ход поршня, мм',
    'Ход поршня стоек/платформы доборной': 'Ход поршня, мм',

    # Регулировки
    'Регулировка центральной высоты': 'Регулировка высоты',
    'Регулировкацентральнойвысоты': 'Регулировка высоты',
    'регулировка центральной высоты': 'Регулировка высоты',

    # Квадраты
    'входной квадрат': 'Размер входного квадрата',
    'Внешний квадрат': 'Размер внешнего квадрата',
    'квадрат': 'Размер квадрата',
    'Квадрат': 'Размер квадрата',
    'Посадочный квадрат (дюйм)': 'Посадочный квадрат, дюйм',
    'Посадочный квадрат(дюйм)': 'Посадочный квадрат, дюйм',

    # Прочие технические параметры
    'Мах толщина размера фланца': 'Толщина фланца, мм',
    'Размер шпильки': 'Размер шпильки, мм',
    'Размер клиньев': 'Размер клиньев, мм',
    'Размер болтов': 'Размер болтов, мм',
    'Размер гаек': 'Размер гаек, мм',
    'Размер кассет мм.': 'Размер кассет, мм',
    'Min зазор разгонки': 'Мин. зазор, мм',
    'Max зазор разгонки': 'Макс. зазор, мм',
    'Макс. глубина захвата': 'Макс. глубина захвата, мм',
    'Глубина захвата': 'Глубина захвата, мм',

    # Объемы и емкости
    'Ёмкость масла': 'Объем масла, л',
    'Номинальный объём бака': 'Объем бака, л',
    'Полезный объём бака': 'Полезный объем бака, л',

    # Количественные показатели
    'Кол-во захватов': 'Количество захватов',
    'Количество захватов': 'Количество захватов',
    'Количество гидравлических стоек': 'Количество стоек',
    'Количество выходов': 'Количество выходов',

    # Цена и коммерция
    'Цена': 'Цена',

    # Специфические модели
    'NQG-6.5 абразивный рельсовый резак внутреннего сгорания/рельсовый режущий станок': 'Модель станка'
}

# Проверяем, что все колонки из mapping существуют в DF
missing_columns = [col for col in column_mapping.keys() if col not in df.columns]
if missing_columns:
    print(f"Предупреждение: Эти колонки не найдены в файле и будут пропущены: {missing_columns}")

# Применяем переименование только для существующих колонок
existing_mapping = {k: v for k, v in column_mapping.items() if k in df.columns}
df.rename(columns=existing_mapping, inplace=True)

# 5. Сохранение с созданием директории при необходимости
os.makedirs(output_dir, exist_ok=True)  # Создаем директорию, если её нет

try:
    df.to_excel(output_path, index=False)
    print(f"Файл успешно сохранен: {output_path}")
except Exception as e:
    raise Exception(f"Ошибка при сохранении файла: {str(e)}")

# 6. Дополнительная проверка результата
print("\nСписок колонок после нормализации:")
print(df.columns.tolist())